{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-09T14:58:28.766Z",
    "end": "2025-08-09T14:58:29.184Z",
    "duration": 418,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ea8db28d-964f-4733-ad11-b22234f64abf",
      "title": "",
      "fullFile": "C:\\Users\\Usuario\\Desktop\\Marcos\\Proyectos\\mocha-chai\\test\\services\\apiTest.js",
      "file": "\\test\\services\\apiTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0f3be534-488c-4f73-92fc-800aa139e1e6",
          "title": "ApiService test de Integración",
          "fullFile": "C:\\Users\\Usuario\\Desktop\\Marcos\\Proyectos\\mocha-chai\\test\\services\\apiTest.js",
          "file": "\\test\\services\\apiTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ApiService test de Integración\"",
              "fullTitle": "ApiService test de Integración \"before each\" hook in \"ApiService test de Integración\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "apiService = new ApiService();",
              "err": {},
              "uuid": "6fc36d77-c5b6-4a27-af38-ad5aa0d22ff2",
              "parentUUID": "0f3be534-488c-4f73-92fc-800aa139e1e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"ApiService test de Integración\"",
              "fullTitle": "ApiService test de Integración \"after each\" hook in \"ApiService test de Integración\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "apiService = null;",
              "err": {},
              "uuid": "5ea8ee08-175f-4962-8d99-f2d54437889d",
              "parentUUID": "0f3be534-488c-4f73-92fc-800aa139e1e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "La respuesta tiene la estrucutura correcta",
              "fullTitle": "ApiService test de Integración La respuesta tiene la estrucutura correcta",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act - Realizar la llamada a la API\nconst result = await apiService.getCharactersByName(\"Rick\");\n// Assert - Comprobar que la respuesta tiene la estructura correcta\n// 1. Verificar que existe un objeto info no vacío\nexpect(result).to.have.property(\"info\").that.is.an(\"object\").that.is.not\n  .empty;\n// 2. Verificar que existe un array results no vacío\nexpect(result).to.have.property(\"results\").that.is.an(\"array\").that.is.not\n  .empty;\n// 3. Verificar que existe al menos un objeto dentro de results que tenga el campo name\nexpect(result.results.some((item) => item.hasOwnProperty(\"name\"))).to.be\n  .true;",
              "err": {},
              "uuid": "8d460755-44fc-4590-b568-1176886dfab1",
              "parentUUID": "0f3be534-488c-4f73-92fc-800aa139e1e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getCharactersByName debe manejar errores",
              "fullTitle": "ApiService test de Integración getCharactersByName debe manejar errores",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let error = await apiService.getCharactersByName(9999);\nexpect(error).to.have.property(\"error\");\nexpect(error.error).to.be.equal(\"There is nothing here\");",
              "err": {},
              "uuid": "ef35c7da-ea31-41fb-b6de-ce5e2a00a827",
              "parentUUID": "0f3be534-488c-4f73-92fc-800aa139e1e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getCharactersByUrl debe manejar errores",
              "fullTitle": "ApiService test de Integración getCharactersByUrl debe manejar errores",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await apiService.getCharactersByUrl(999);\n} catch (error) {\n  expect(error).to.be.an(\"error\");\n  expect(error.cause.message).to.include(\"Invalid\");\n}",
              "err": {},
              "uuid": "27c8bb02-60c7-4163-8bf2-11a2af0fee29",
              "parentUUID": "0f3be534-488c-4f73-92fc-800aa139e1e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d460755-44fc-4590-b568-1176886dfab1",
            "ef35c7da-ea31-41fb-b6de-ce5e2a00a827",
            "27c8bb02-60c7-4163-8bf2-11a2af0fee29"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 412,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "report",
        "charts": "true",
        "autoOpen": "true"
      },
      "version": "6.2.0"
    }
  }
}