{
  "stats": {
    "suites": 4,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-10T18:40:34.404Z",
    "end": "2025-03-10T18:40:34.736Z",
    "duration": 332,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "079d65e1-6f7e-4637-962c-223a03c824e7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a25cd333-177f-4276-a40f-c18a87a0e508",
          "title": "Array Assert Methods",
          "fullFile": "C:\\Users\\Usuario\\dESktop\\Marcos\\Ciberseguridad\\BRS\\Mocha\\mocha-chai\\test\\ejemplos\\assertTest.js",
          "file": "\\test\\ejemplos\\assertTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Array Assert Methods\"",
              "fullTitle": "Array Assert Methods \"before each\" hook in \"Array Assert Methods\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.push(\"John\");\nitems.push(\"Jane\");",
              "err": {},
              "uuid": "ffb44c03-1ff5-45c5-a6de-b118a6659fca",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Array Assert Methods\"",
              "fullTitle": "Array Assert Methods \"after each\" hook in \"Array Assert Methods\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items = [];",
              "err": {},
              "uuid": "b8e6ebb8-89ce-4ca5-9d6f-d4be0ed7c83a",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return number of array items",
              "fullTitle": "Array Assert Methods should return number of array items",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.lengthOf(items, 2);",
              "err": {},
              "uuid": "fdf082d0-0099-46ca-930e-b0348529140c",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new value",
              "fullTitle": "Array Assert Methods should add a new value",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.push(\"Joe\");\nassert.lengthOf(items, 3);",
              "err": {},
              "uuid": "cca58602-b86b-4181-8071-3bf0d1694325",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the first item",
              "fullTitle": "Array Assert Methods should return the first item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(items.shift(), \"John\");",
              "err": {},
              "uuid": "5f48c9e7-3e1c-47e6-b6b9-8f0e742a3ea1",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last item",
              "fullTitle": "Array Assert Methods should return the last item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(items.pop(), \"Jane\");",
              "err": {},
              "uuid": "593fa9f7-3c98-41c3-9d7c-3d4a0beed575",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a value in the array",
              "fullTitle": "Array Assert Methods should find a value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isAbove(items.indexOf(\"John\"), -1);",
              "err": {},
              "uuid": "89a68818-9b20-48a6-9b1a-96be441c8865",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find a value in the array",
              "fullTitle": "Array Assert Methods should not find a value in the array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isBelow(items.indexOf(\"Fake\"), 0);",
              "err": {},
              "uuid": "8c955f83-50d5-48d8-95d6-1db5702305a4",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should map to new values",
              "fullTitle": "Array Assert Methods should map to new values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mappedItems = items.map(function (val) {\n  return val + \" Doe\";\n});\nmappedItems.forEach(function (val) {\n  assert.isAbove(val.indexOf(\" Doe\"), -1);\n});",
              "err": {},
              "uuid": "2c345f36-3b86-4d1d-998b-91a21220a25c",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter to one value",
              "fullTitle": "Array Assert Methods should filter to one value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var filteredItems = items.filter(function (val) {\n  return val === \"Jane\";\n});\nassert.equal(filteredItems[0], \"Jane\");",
              "err": {},
              "uuid": "d219cd3e-07ae-4d91-90a9-03975530276a",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reduce to one string",
              "fullTitle": "Array Assert Methods should reduce to one string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var reduced = items.reduce(function (allNames, name) {\n  return allNames + \", \" + name;\n});\nassert.equal(reduced, \"John, Jane\");",
              "err": {},
              "uuid": "9455da03-5528-4f25-ae48-d6e7883252c2",
              "parentUUID": "a25cd333-177f-4276-a40f-c18a87a0e508",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fdf082d0-0099-46ca-930e-b0348529140c",
            "cca58602-b86b-4181-8071-3bf0d1694325",
            "5f48c9e7-3e1c-47e6-b6b9-8f0e742a3ea1",
            "593fa9f7-3c98-41c3-9d7c-3d4a0beed575",
            "89a68818-9b20-48a6-9b1a-96be441c8865",
            "8c955f83-50d5-48d8-95d6-1db5702305a4",
            "2c345f36-3b86-4d1d-998b-91a21220a25c",
            "d219cd3e-07ae-4d91-90a9-03975530276a",
            "9455da03-5528-4f25-ae48-d6e7883252c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
          "title": "Array Except Methods",
          "fullFile": "C:\\Users\\Usuario\\dESktop\\Marcos\\Ciberseguridad\\BRS\\Mocha\\mocha-chai\\test\\ejemplos\\expectTest.js",
          "file": "\\test\\ejemplos\\expectTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Array Except Methods\"",
              "fullTitle": "Array Except Methods \"before each\" hook in \"Array Except Methods\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.push(\"John\");\nitems.push(\"Jane\");",
              "err": {},
              "uuid": "97a556ba-e659-40ff-b4b3-ad10e5e63854",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Array Except Methods\"",
              "fullTitle": "Array Except Methods \"after each\" hook in \"Array Except Methods\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items = [];",
              "err": {},
              "uuid": "69fc1bad-3ef3-4701-84fb-54eee1995669",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return number of array items",
              "fullTitle": "Array Except Methods should return number of array items",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(items).to.have.length(2);",
              "err": {},
              "uuid": "a8bd9fe4-8696-4b78-af17-203f5c1b4b03",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new value",
              "fullTitle": "Array Except Methods should add a new value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.push(\"Joe\");\nexpect(items).to.have.length(3);",
              "err": {},
              "uuid": "a0780760-3a1b-4f49-92b3-76a038f14fd7",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the first item",
              "fullTitle": "Array Except Methods should return the first item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(items.shift()).to.equal(\"John\");",
              "err": {},
              "uuid": "f14419eb-dc3c-4396-a1dc-f46b16f0946b",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last item",
              "fullTitle": "Array Except Methods should return the last item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(items.pop()).to.equal(\"Jane\");",
              "err": {},
              "uuid": "ff22143a-52e6-46fd-87a2-de9a377c9201",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a value in the array",
              "fullTitle": "Array Except Methods should find a value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(items.indexOf(\"John\")).to.be.above(-1);",
              "err": {},
              "uuid": "05e31373-ce65-454c-8ab2-ef02a5945f59",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find a value in the array",
              "fullTitle": "Array Except Methods should not find a value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(items.indexOf(\"Fake\")).to.not.be.above(-1);",
              "err": {},
              "uuid": "6afc4708-5c37-4ad0-9471-3016094ae35d",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should map to new values",
              "fullTitle": "Array Except Methods should map to new values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mappedItems = items.map(function (val) {\n  return val + \" Doe\";\n});\nmappedItems.forEach(function (val) {\n  expect(val.indexOf(\" Doe\")).to.be.above(-1);\n});",
              "err": {},
              "uuid": "4196b683-47c7-4d6b-a136-13618170aa3b",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter to one value",
              "fullTitle": "Array Except Methods should filter to one value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var filteredItems = items.filter(function (val) {\n  return val === \"Jane\";\n});\nexpect(filteredItems[0]).to.equal(\"Jane\");",
              "err": {},
              "uuid": "4f0bc38c-a1fa-4318-b526-b5acbcf05bdb",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reduce to one string",
              "fullTitle": "Array Except Methods should reduce to one string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var reduced = items.reduce(function (allNames, name) {\n  return allNames + \", \" + name;\n});\nexpect(reduced).to.equal(\"John, Jane\");",
              "err": {},
              "uuid": "c53bf938-9182-46ca-b167-486860e4aeb2",
              "parentUUID": "f0b1cecf-8a44-4d18-bc34-613b35156e7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8bd9fe4-8696-4b78-af17-203f5c1b4b03",
            "a0780760-3a1b-4f49-92b3-76a038f14fd7",
            "f14419eb-dc3c-4396-a1dc-f46b16f0946b",
            "ff22143a-52e6-46fd-87a2-de9a377c9201",
            "05e31373-ce65-454c-8ab2-ef02a5945f59",
            "6afc4708-5c37-4ad0-9471-3016094ae35d",
            "4196b683-47c7-4d6b-a136-13618170aa3b",
            "4f0bc38c-a1fa-4318-b526-b5acbcf05bdb",
            "c53bf938-9182-46ca-b167-486860e4aeb2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6ed28f02-118b-4f13-a5b3-33a559160805",
          "title": "Array Should Methods",
          "fullFile": "C:\\Users\\Usuario\\dESktop\\Marcos\\Ciberseguridad\\BRS\\Mocha\\mocha-chai\\test\\ejemplos\\shouldTest.js",
          "file": "\\test\\ejemplos\\shouldTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Array Should Methods\"",
              "fullTitle": "Array Should Methods \"before each\" hook in \"Array Should Methods\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.push(\"John\");\nitems.push(\"Jane\");",
              "err": {},
              "uuid": "60e43729-2998-49cb-ab11-ec0f9e57c7e1",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Array Should Methods\"",
              "fullTitle": "Array Should Methods \"after each\" hook in \"Array Should Methods\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items = [];",
              "err": {},
              "uuid": "9582efb3-4a75-44c0-941d-dd26ced46b3b",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return number of array items",
              "fullTitle": "Array Should Methods should return number of array items",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.should.have.length(2);",
              "err": {},
              "uuid": "2096b87c-5994-4e44-8d79-1cc5b326b028",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new value",
              "fullTitle": "Array Should Methods should add a new value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.push(\"Joe\");\nitems.should.have.length(3);",
              "err": {},
              "uuid": "125d8c70-04b0-4b5b-a2b2-8d623144feb5",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the first item",
              "fullTitle": "Array Should Methods should return the first item",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.shift().should.equal(\"John\");",
              "err": {},
              "uuid": "076462a0-6dee-4bb0-a038-c246e1ddf525",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the last item",
              "fullTitle": "Array Should Methods should return the last item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.pop().should.equal(\"Jane\");",
              "err": {},
              "uuid": "e3b43ed5-fec0-469a-8df3-0d527a07bec7",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should find a value in the array",
              "fullTitle": "Array Should Methods should find a value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.indexOf(\"John\").should.be.above(-1);",
              "err": {},
              "uuid": "684b3dca-a524-4824-92ed-0b5a4bc2dbc9",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not find a value in the array",
              "fullTitle": "Array Should Methods should not find a value in the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "items.indexOf(\"Fake\").should.not.be.above(-1);",
              "err": {},
              "uuid": "c58e89d4-0820-4f52-a8ba-f74980c8f799",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should map to new values",
              "fullTitle": "Array Should Methods should map to new values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mappedItems = items.map(function (val) {\n  return val + \" Doe\";\n});\nmappedItems.forEach(function (val) {\n  val.indexOf(\" Doe\").should.be.above(-1);\n});",
              "err": {},
              "uuid": "e26fb98f-1802-4403-a6ee-21d48d81278c",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should filter to one value",
              "fullTitle": "Array Should Methods should filter to one value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var filteredItems = items.filter(function (val) {\n  return val === \"Jane\";\n});\nfilteredItems[0].should.equal(\"Jane\");",
              "err": {},
              "uuid": "8bc30a0d-7efd-4ea3-a931-8d1af9f443a2",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reduce to one string",
              "fullTitle": "Array Should Methods should reduce to one string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var reduced = items.reduce(function (allNames, name) {\n  return allNames + \", \" + name;\n});\nreduced.should.equal(\"John, Jane\");",
              "err": {},
              "uuid": "79d08b87-5cc2-4ccb-95fe-da6dd6f92a27",
              "parentUUID": "6ed28f02-118b-4f13-a5b3-33a559160805",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2096b87c-5994-4e44-8d79-1cc5b326b028",
            "125d8c70-04b0-4b5b-a2b2-8d623144feb5",
            "076462a0-6dee-4bb0-a038-c246e1ddf525",
            "e3b43ed5-fec0-469a-8df3-0d527a07bec7",
            "684b3dca-a524-4824-92ed-0b5a4bc2dbc9",
            "c58e89d4-0820-4f52-a8ba-f74980c8f799",
            "e26fb98f-1802-4403-a6ee-21d48d81278c",
            "8bc30a0d-7efd-4ea3-a931-8d1af9f443a2",
            "79d08b87-5cc2-4ccb-95fe-da6dd6f92a27"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc9840b6-1376-42a1-983c-68ab13729b7d",
          "title": "ApiService test de Integración",
          "fullFile": "C:\\Users\\Usuario\\dESktop\\Marcos\\Ciberseguridad\\BRS\\Mocha\\mocha-chai\\test\\services\\apiTest.js",
          "file": "\\test\\services\\apiTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ApiService test de Integración\"",
              "fullTitle": "ApiService test de Integración \"before each\" hook in \"ApiService test de Integración\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "apiService = new ApiService();",
              "err": {},
              "uuid": "55292c7f-24d6-43a2-9033-537a267dc009",
              "parentUUID": "cc9840b6-1376-42a1-983c-68ab13729b7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"ApiService test de Integración\"",
              "fullTitle": "ApiService test de Integración \"after each\" hook in \"ApiService test de Integración\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "apiService = null;",
              "err": {},
              "uuid": "a772cae8-538f-4b57-a39d-3352bdf20e66",
              "parentUUID": "cc9840b6-1376-42a1-983c-68ab13729b7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "La respuesta tiene la estrucutura correcta",
              "fullTitle": "ApiService test de Integración La respuesta tiene la estrucutura correcta",
              "timedOut": false,
              "duration": 252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act - Realizar la llamada a la API\nconst result = await apiService.getCharactersByName(\"Rick\");\n// Assert - Comprobar que la respuesta tiene la estructura correcta\n// 1. Verificar que existe un objeto info no vacío\nexpect(result).to.have.property(\"info\").that.is.an(\"object\").that.is.not\n  .empty;\n// 2. Verificar que existe un array results no vacío\nexpect(result).to.have.property(\"results\").that.is.an(\"array\").that.is.not\n  .empty;\n// 3. Verificar que existe al menos un objeto dentro de results que tenga el campo name\nexpect(result.results.some((item) => item.hasOwnProperty(\"name\"))).to.be\n  .true;",
              "err": {},
              "uuid": "5d205a0a-789a-44d0-ab7d-d3ceefc9d372",
              "parentUUID": "cc9840b6-1376-42a1-983c-68ab13729b7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getCharactersByName debe manejar errores",
              "fullTitle": "ApiService test de Integración getCharactersByName debe manejar errores",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let error = await apiService.getCharactersByName(9999);\nexpect(error).to.have.property(\"error\");\nexpect(error.error).to.be.equal(\"There is nothing here\");",
              "err": {},
              "uuid": "6a9cebc0-e7dd-4c46-970a-8e11a5f6a6f6",
              "parentUUID": "cc9840b6-1376-42a1-983c-68ab13729b7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getCharactersByUrl debe manejar errores",
              "fullTitle": "ApiService test de Integración getCharactersByUrl debe manejar errores",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await apiService.getCharactersByUrl(999);\n} catch (error) {\n  expect(error).to.be.an(\"error\");\n  expect(error.cause.message).to.include(\"Invalid\");\n}",
              "err": {},
              "uuid": "4b37531d-2a07-46bf-8916-90de09c4cde8",
              "parentUUID": "cc9840b6-1376-42a1-983c-68ab13729b7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d205a0a-789a-44d0-ab7d-d3ceefc9d372",
            "6a9cebc0-e7dd-4c46-970a-8e11a5f6a6f6",
            "4b37531d-2a07-46bf-8916-90de09c4cde8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 315,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "reportFilename": "report",
        "charts": "true",
        "autoOpen": "true"
      },
      "version": "6.2.0"
    }
  }
}